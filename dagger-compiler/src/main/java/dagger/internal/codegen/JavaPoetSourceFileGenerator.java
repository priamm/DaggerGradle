package dagger.internal.codegen;

import com.google.common.base.Optional;
import com.google.common.base.Throwables;
import com.google.common.collect.Iterables;
import com.google.common.io.CharSink;
import com.google.common.io.CharSource;
import com.google.googlejavaformat.java.Formatter;
import com.google.googlejavaformat.java.FormatterException;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.TypeSpec;
import java.io.IOException;
import java.io.Writer;
import javax.annotation.Generated;
import javax.annotation.processing.Filer;
import javax.lang.model.element.Element;
import javax.lang.model.util.Elements;
import javax.tools.JavaFileObject;

import static com.google.common.base.Preconditions.checkNotNull;

abstract class JavaPoetSourceFileGenerator<T> {
  private static final String GENERATED_COMMENTS = "https://google.github.io/dagger";

  private static final AnnotationSpec GENERATED =
      AnnotationSpec.builder(Generated.class)
          .addMember("value", "$S", ComponentProcessor.class.getName())
          .addMember("comments", "$S", GENERATED_COMMENTS)
          .build();

  private final Filer filer;
  private final boolean generatedAnnotationAvailable;

  JavaPoetSourceFileGenerator(Filer filer, Elements elements) {
    this.filer = checkNotNull(filer);
    generatedAnnotationAvailable = elements.getTypeElement("javax.annotation.Generated") != null;
  }

  void generate(T input) throws SourceFileGenerationException {
    ClassName generatedTypeName = nameGeneratedType(input);
    try {
      Optional<TypeSpec.Builder> type = write(generatedTypeName, input);
      if (!type.isPresent()) {
        return;
      }
      JavaFile javaFile = buildJavaFile(generatedTypeName, type.get());

      final JavaFileObject sourceFile = filer.createSourceFile(
          generatedTypeName.toString(),
          Iterables.toArray(javaFile.typeSpec.originatingElements, Element.class));
      try {
        new Formatter().formatSource(
            CharSource.wrap(javaFile.toString()),
            new CharSink() {
              @Override public Writer openStream() throws IOException {
                return sourceFile.openWriter();
              }
            });
      } catch (FormatterException e) {
        throw new SourceFileGenerationException(
            Optional.of(generatedTypeName), e, getElementForErrorReporting(input));
      }
    } catch (Exception e) {
      Throwables.propagateIfPossible(e, SourceFileGenerationException.class);
      throw new SourceFileGenerationException(
          Optional.<ClassName>absent(), e, getElementForErrorReporting(input));
    }
  }

  private JavaFile buildJavaFile(
      ClassName generatedTypeName, TypeSpec.Builder typeSpecBuilder) {
    if (generatedAnnotationAvailable) {
      typeSpecBuilder.addAnnotation(GENERATED);
    }
    JavaFile.Builder javaFileBuilder =
        JavaFile.builder(generatedTypeName.packageName(), typeSpecBuilder.build())
            .skipJavaLangImports(true);
    if (!generatedAnnotationAvailable) {
      javaFileBuilder.addFileComment(
          "Generated by $L ($L).", ComponentProcessor.class.getName(), GENERATED_COMMENTS);
    }
    return javaFileBuilder.build();
  }

  abstract ClassName nameGeneratedType(T input);

  abstract Optional<? extends Element> getElementForErrorReporting(T input);

  abstract Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input);
}
